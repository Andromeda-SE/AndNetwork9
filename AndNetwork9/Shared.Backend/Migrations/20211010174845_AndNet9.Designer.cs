// <auto-generated />
using System;
using System.Net;
using AndNetwork9.Shared.Backend;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AndNetwork9.Shared.Backend.Migrations
{
    [DbContext(typeof(ClanDataContext))]
    [Migration("20211010174845_AndNet9")]
    partial class AndNet9
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0-rc.1.21452.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccessRuleMember", b =>
                {
                    b.Property<int>("AccessRulesOverridesId")
                        .HasColumnType("integer");

                    b.Property<int>("AllowedMembersId")
                        .HasColumnType("integer");

                    b.HasKey("AccessRulesOverridesId", "AllowedMembersId");

                    b.HasIndex("AllowedMembersId");

                    b.ToTable("AccessRuleMember");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Award", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AutomationTag")
                        .HasColumnType("integer");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("GaveById")
                        .HasColumnType("integer");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AutomationTag");

                    b.HasIndex("GaveById");

                    b.HasIndex("MemberId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Backend.Auth.AuthSession", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<IPAddress>("Address")
                        .IsRequired()
                        .HasColumnType("inet");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CodeExpireTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpireTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MemberId")
                        .HasColumnType("integer");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SessionId");

                    b.HasIndex("Address");

                    b.HasIndex("MemberId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Backend.Discord.Channels.Category", b =>
                {
                    b.Property<int>("Position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Position"));

                    b.Property<Guid>("ConcurrencyToken")
                        .HasColumnType("uuid");

                    b.Property<decimal>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Position");

                    b.HasAlternateKey("DiscordId");

                    b.ToTable("DiscordCategories");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Backend.Discord.Channels.Channel", b =>
                {
                    b.Property<decimal>("DiscordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("AdvisorPermissions")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelFlags")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelPosition")
                        .HasColumnType("integer");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("EveryonePermissions")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("MemberPermissions")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("SquadCommandersPermissions")
                        .HasColumnType("numeric(20,0)");

                    b.Property<short?>("SquadNumber")
                        .HasColumnType("smallint");

                    b.Property<short?>("SquadPartNumber")
                        .HasColumnType("smallint");

                    b.Property<decimal>("SquadPermissions")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("DiscordId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("CategoryId", "ChannelPosition");

                    b.HasIndex("SquadNumber", "SquadPartNumber");

                    b.ToTable("DiscordChannels");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Backend.Elections.Election", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("AnnouncementDate")
                        .HasColumnType("date");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date");

                    b.Property<int>("Stage")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("VoteDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Elections");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Backend.Elections.ElectionsMember", b =>
                {
                    b.Property<int>("ElectionId")
                        .HasColumnType("integer");

                    b.Property<int>("Direction")
                        .HasColumnType("integer");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("Voted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("VotedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Votes")
                        .HasColumnType("integer");

                    b.HasKey("ElectionId", "Direction", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("ElectionsMember");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Backend.Elections.ElectionVoting", b =>
                {
                    b.Property<int>("ElectionId")
                        .HasColumnType("integer");

                    b.Property<int>("Direction")
                        .HasColumnType("integer");

                    b.Property<int>("AgainstAll")
                        .HasColumnType("integer");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.HasKey("ElectionId", "Direction");

                    b.ToTable("ElectionVoting");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Direction")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("DiscordNotificationsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("JoinDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("LastDirectionChange")
                        .HasColumnType("date");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<string>("RealName")
                        .HasColumnType("text");

                    b.Property<bool>("SquadCommander")
                        .HasColumnType("boolean");

                    b.Property<short?>("SquadNumber")
                        .HasColumnType("smallint");

                    b.Property<short>("SquadPartNumber")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("SteamId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long?>("TelegramId")
                        .HasColumnType("bigint");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<long?>("VkId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Direction");

                    b.HasIndex("DiscordId")
                        .IsUnique();

                    b.HasIndex("Nickname")
                        .IsUnique();

                    b.HasIndex("Rank");

                    b.HasIndex("SteamId")
                        .IsUnique();

                    b.HasIndex("SquadNumber", "SquadPartNumber");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Squad", b =>
                {
                    b.Property<short>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Number"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateOnly>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("DisbandDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("DiscordRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Number");

                    b.ToTable("Squads");
                });

            modelBuilder.Entity("AndNetwork9.Shared.SquadPart", b =>
                {
                    b.Property<short>("Number")
                        .HasColumnType("smallint");

                    b.Property<short>("Part")
                        .HasColumnType("smallint");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<Guid>("ConcurrencyToken")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal?>("DiscordRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Number", "Part");

                    b.ToTable("SquadPart");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Storage.Repo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReadRuleId")
                        .HasColumnType("integer");

                    b.Property<string>("RepoName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("WriteRuleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasAlternateKey("RepoName");

                    b.HasIndex("CommentId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ReadRuleId");

                    b.HasIndex("WriteRuleId");

                    b.ToTable("Repos");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Storage.RepoNode", b =>
                {
                    b.Property<int>("RepoId")
                        .HasColumnType("integer");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<int>("Modification")
                        .HasColumnType("integer");

                    b.Property<int>("Prototype")
                        .HasColumnType("integer");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RepoId", "Version", "Modification", "Prototype");

                    b.HasIndex("AuthorId");

                    b.ToTable("RepoNodes");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Storage.StaticFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommentId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Extension")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReadRuleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("Path");

                    b.HasIndex("CommentId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ReadRuleId");

                    b.ToTable("StaticFiles");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowAssignByMember")
                        .HasColumnType("boolean");

                    b.Property<int?>("AssigneeId")
                        .HasColumnType("integer");

                    b.Property<int?>("Award")
                        .HasColumnType("integer");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DirectionAssignee")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastEditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("ReadRuleId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReporterId")
                        .HasColumnType("integer");

                    b.Property<short?>("SquadAssigneeId")
                        .HasColumnType("smallint");

                    b.Property<short?>("SquadPartAssigneeId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WriteRuleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ReadRuleId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("SquadAssigneeId");

                    b.HasIndex("WriteRuleId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Utility.AccessRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int[]>("Directions")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("MinRank")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<short?>("SquadId")
                        .HasColumnType("smallint");

                    b.Property<short?>("SquadPartId")
                        .HasColumnType("smallint");

                    b.Property<short?>("SquadPartNumber")
                        .HasColumnType("smallint");

                    b.Property<short?>("SquadPartPart")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("SquadId");

                    b.HasIndex("SquadPartNumber", "SquadPartPart");

                    b.ToTable("AccessRules");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Utility.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastEditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int?>("RepoId")
                        .HasColumnType("integer");

                    b.Property<int?>("TaskId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("VotingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ParentId");

                    b.HasIndex("RepoId");

                    b.HasIndex("TaskId");

                    b.HasIndex("VotingId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Utility.Tag", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.HasKey("Name");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Votings.Vote", b =>
                {
                    b.Property<int>("VotingId")
                        .HasColumnType("integer");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Result")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VoteTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("VotingId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("Vote");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Votings.Voting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EditRuleId")
                        .HasColumnType("integer");

                    b.Property<bool>("EditVoteEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastEditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReadRuleId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReporterId")
                        .HasColumnType("integer");

                    b.Property<int>("Result")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EditRuleId");

                    b.HasIndex("ReadRuleId");

                    b.HasIndex("ReporterId");

                    b.ToTable("Votings");
                });

            modelBuilder.Entity("MemberSquad", b =>
                {
                    b.Property<int>("CandidatesId")
                        .HasColumnType("integer");

                    b.Property<short>("PendingSquadMembershipNumber")
                        .HasColumnType("smallint");

                    b.HasKey("CandidatesId", "PendingSquadMembershipNumber");

                    b.HasIndex("PendingSquadMembershipNumber");

                    b.ToTable("MemberSquad");
                });

            modelBuilder.Entity("MemberTask", b =>
                {
                    b.Property<int>("WatchersId")
                        .HasColumnType("integer");

                    b.Property<int>("WatchingTasksId")
                        .HasColumnType("integer");

                    b.HasKey("WatchersId", "WatchingTasksId");

                    b.HasIndex("WatchingTasksId");

                    b.ToTable("MemberTask");
                });

            modelBuilder.Entity("StaticFileTask", b =>
                {
                    b.Property<int>("FilesId")
                        .HasColumnType("integer");

                    b.Property<int>("TasksId")
                        .HasColumnType("integer");

                    b.HasKey("FilesId", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("StaticFileTask");
                });

            modelBuilder.Entity("TagTask", b =>
                {
                    b.Property<string>("TagsName")
                        .HasColumnType("text");

                    b.Property<int>("TasksId")
                        .HasColumnType("integer");

                    b.HasKey("TagsName", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("TagTask");
                });

            modelBuilder.Entity("AccessRuleMember", b =>
                {
                    b.HasOne("AndNetwork9.Shared.Utility.AccessRule", null)
                        .WithMany()
                        .HasForeignKey("AccessRulesOverridesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNetwork9.Shared.Member", null)
                        .WithMany()
                        .HasForeignKey("AllowedMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AndNetwork9.Shared.Award", b =>
                {
                    b.HasOne("AndNetwork9.Shared.Member", "GaveBy")
                        .WithMany("GivenAwards")
                        .HasForeignKey("GaveById");

                    b.HasOne("AndNetwork9.Shared.Member", "Member")
                        .WithMany("Awards")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GaveBy");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Backend.Auth.AuthSession", b =>
                {
                    b.HasOne("AndNetwork9.Shared.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Backend.Discord.Channels.Channel", b =>
                {
                    b.HasOne("AndNetwork9.Shared.Backend.Discord.Channels.Category", "Category")
                        .WithMany("Channels")
                        .HasForeignKey("CategoryId");

                    b.HasOne("AndNetwork9.Shared.Squad", "Squad")
                        .WithMany()
                        .HasForeignKey("SquadNumber");

                    b.HasOne("AndNetwork9.Shared.SquadPart", "SquadPart")
                        .WithMany()
                        .HasForeignKey("SquadNumber", "SquadPartNumber");

                    b.Navigation("Category");

                    b.Navigation("Squad");

                    b.Navigation("SquadPart");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Backend.Elections.ElectionsMember", b =>
                {
                    b.HasOne("AndNetwork9.Shared.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNetwork9.Shared.Backend.Elections.ElectionVoting", "Voting")
                        .WithMany("Members")
                        .HasForeignKey("ElectionId", "Direction")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Voting");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Backend.Elections.ElectionVoting", b =>
                {
                    b.HasOne("AndNetwork9.Shared.Backend.Elections.Election", "Election")
                        .WithMany("Votings")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Election");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Member", b =>
                {
                    b.HasOne("AndNetwork9.Shared.SquadPart", "SquadPart")
                        .WithMany("Members")
                        .HasForeignKey("SquadNumber", "SquadPartNumber");

                    b.Navigation("SquadPart");
                });

            modelBuilder.Entity("AndNetwork9.Shared.SquadPart", b =>
                {
                    b.HasOne("AndNetwork9.Shared.Squad", "Squad")
                        .WithMany("SquadParts")
                        .HasForeignKey("Number")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Storage.Repo", b =>
                {
                    b.HasOne("AndNetwork9.Shared.Utility.Comment", "Description")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNetwork9.Shared.Member", "Creator")
                        .WithMany("Repos")
                        .HasForeignKey("CreatorId");

                    b.HasOne("AndNetwork9.Shared.Utility.AccessRule", "ReadRule")
                        .WithMany()
                        .HasForeignKey("ReadRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNetwork9.Shared.Utility.AccessRule", "WriteRule")
                        .WithMany()
                        .HasForeignKey("WriteRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Description");

                    b.Navigation("ReadRule");

                    b.Navigation("WriteRule");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Storage.RepoNode", b =>
                {
                    b.HasOne("AndNetwork9.Shared.Member", "Author")
                        .WithMany("RepoNodes")
                        .HasForeignKey("AuthorId");

                    b.HasOne("AndNetwork9.Shared.Storage.Repo", "Repo")
                        .WithMany("Nodes")
                        .HasForeignKey("RepoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Repo");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Storage.StaticFile", b =>
                {
                    b.HasOne("AndNetwork9.Shared.Utility.Comment", null)
                        .WithMany("Files")
                        .HasForeignKey("CommentId");

                    b.HasOne("AndNetwork9.Shared.Member", "Owner")
                        .WithMany("StaticFiles")
                        .HasForeignKey("OwnerId");

                    b.HasOne("AndNetwork9.Shared.Utility.AccessRule", "ReadRule")
                        .WithMany()
                        .HasForeignKey("ReadRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("ReadRule");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Task", b =>
                {
                    b.HasOne("AndNetwork9.Shared.Member", "Assignee")
                        .WithMany("Tasks")
                        .HasForeignKey("AssigneeId");

                    b.HasOne("AndNetwork9.Shared.Task", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNetwork9.Shared.Utility.AccessRule", "ReadRule")
                        .WithMany()
                        .HasForeignKey("ReadRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNetwork9.Shared.Member", "Reporter")
                        .WithMany("CreatedTasks")
                        .HasForeignKey("ReporterId");

                    b.HasOne("AndNetwork9.Shared.Squad", "SquadAssignee")
                        .WithMany()
                        .HasForeignKey("SquadAssigneeId");

                    b.HasOne("AndNetwork9.Shared.Utility.AccessRule", "WriteRule")
                        .WithMany()
                        .HasForeignKey("WriteRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Parent");

                    b.Navigation("ReadRule");

                    b.Navigation("Reporter");

                    b.Navigation("SquadAssignee");

                    b.Navigation("WriteRule");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Utility.AccessRule", b =>
                {
                    b.HasOne("AndNetwork9.Shared.Squad", "Squad")
                        .WithMany()
                        .HasForeignKey("SquadId");

                    b.HasOne("AndNetwork9.Shared.SquadPart", "SquadPart")
                        .WithMany()
                        .HasForeignKey("SquadPartNumber", "SquadPartPart");

                    b.Navigation("Squad");

                    b.Navigation("SquadPart");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Utility.Comment", b =>
                {
                    b.HasOne("AndNetwork9.Shared.Member", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("AndNetwork9.Shared.Utility.Comment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("AndNetwork9.Shared.Storage.Repo", null)
                        .WithMany("Comments")
                        .HasForeignKey("RepoId");

                    b.HasOne("AndNetwork9.Shared.Task", null)
                        .WithMany("Comments")
                        .HasForeignKey("TaskId");

                    b.HasOne("AndNetwork9.Shared.Votings.Voting", null)
                        .WithMany("Comments")
                        .HasForeignKey("VotingId");

                    b.Navigation("Author");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Votings.Vote", b =>
                {
                    b.HasOne("AndNetwork9.Shared.Member", "Member")
                        .WithMany("Votes")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNetwork9.Shared.Votings.Voting", "Voting")
                        .WithMany("Votes")
                        .HasForeignKey("VotingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Voting");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Votings.Voting", b =>
                {
                    b.HasOne("AndNetwork9.Shared.Utility.AccessRule", "EditRule")
                        .WithMany()
                        .HasForeignKey("EditRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNetwork9.Shared.Utility.AccessRule", "ReadRule")
                        .WithMany()
                        .HasForeignKey("ReadRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNetwork9.Shared.Member", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId");

                    b.Navigation("EditRule");

                    b.Navigation("ReadRule");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("MemberSquad", b =>
                {
                    b.HasOne("AndNetwork9.Shared.Member", null)
                        .WithMany()
                        .HasForeignKey("CandidatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNetwork9.Shared.Squad", null)
                        .WithMany()
                        .HasForeignKey("PendingSquadMembershipNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MemberTask", b =>
                {
                    b.HasOne("AndNetwork9.Shared.Member", null)
                        .WithMany()
                        .HasForeignKey("WatchersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNetwork9.Shared.Task", null)
                        .WithMany()
                        .HasForeignKey("WatchingTasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaticFileTask", b =>
                {
                    b.HasOne("AndNetwork9.Shared.Storage.StaticFile", null)
                        .WithMany()
                        .HasForeignKey("FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNetwork9.Shared.Task", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagTask", b =>
                {
                    b.HasOne("AndNetwork9.Shared.Utility.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AndNetwork9.Shared.Task", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AndNetwork9.Shared.Backend.Discord.Channels.Category", b =>
                {
                    b.Navigation("Channels");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Backend.Elections.Election", b =>
                {
                    b.Navigation("Votings");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Backend.Elections.ElectionVoting", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Member", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("CreatedTasks");

                    b.Navigation("GivenAwards");

                    b.Navigation("RepoNodes");

                    b.Navigation("Repos");

                    b.Navigation("StaticFiles");

                    b.Navigation("Tasks");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Squad", b =>
                {
                    b.Navigation("SquadParts");
                });

            modelBuilder.Entity("AndNetwork9.Shared.SquadPart", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Storage.Repo", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Task", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Utility.Comment", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("AndNetwork9.Shared.Votings.Voting", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}

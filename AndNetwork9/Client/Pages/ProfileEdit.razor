@page "/member/edit"
<div class="row">
    <div class="col-3">
        <label class="form-label">Никнейм</label>
    </div>
    <div class="col">
        <input autocomplete="off" @bind="Nickname" class="form-control" placeholder="@AuthStateProvider.CurrentMember.Nickname" type="text">
    </div>
    <div class="col-auto">
        <button class="btn btn-primary mb-3" disabled="@(string.IsNullOrWhiteSpace(Nickname) || Nickname.Length > 26)" @onclick="async () => await SetNewNickname()" type="submit">Изменить</button>
    </div>
</div>
<div class="row">
    <div class="col-3">
        <label class="form-label">Имя</label>
    </div>
    <div class="col">
        <input autocomplete="off" @bind="Realname" class="form-control" placeholder="@AuthStateProvider.CurrentMember.RealName" type="text">
    </div>
    <div class="col-auto">
        <button class="btn btn-primary mb-3" @onclick="async () => await SetNewRealname()" type="submit">Изменить</button>
    </div>
</div>
<div class="row">
    <div class="col-3">
        <label class="form-label">Направление</label>
    </div>
    <div class="col">
        <select @bind="Direction" class="form-select" disabled="@(AuthStateProvider.CurrentMember.Direction == Direction.None)" placeholder="@AuthStateProvider.CurrentMember.Direction.GetName()">
            @foreach (Direction direction in Enum.GetValues<Direction>().Where(x => x > Direction.None))
            {
                @if (direction == AuthStateProvider.CurrentMember.Direction)
                {
                    <option selected value="@direction">@direction.GetName()</option>
                }
                else
                {
                    <option value="@direction">@direction.GetName()</option>
                }
            }
        </select>
    </div>
    <div class="col-auto">
        <button class="btn btn-primary mb-3" disabled="@(Direction == AuthStateProvider.CurrentMember.Direction || Direction <= Direction.None || AuthStateProvider.CurrentMember.Rank <= Rank.Neophyte)" @onclick="async () => await SetNewDirection()" type="submit">Изменить</button>
    </div>
</div>
<div class="row">
    <div class="col-3">
        <label class="form-label">Часовой пояс</label>
    </div>
    <div class="col">
        <div class="d-flex">
            <select @bind="SelectedTimeZoneId" class="form-select">
                <option selected="@(AuthStateProvider.CurrentMember.TimeZone is null)" value="null">(не выбран)</option>
                @foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones())
                {
                    @if (timeZone.Id == AuthStateProvider.CurrentMember.TimeZone?.Id)
                    {
                        <option selected value="@timeZone.Id">@timeZone.DisplayName</option>
                    }
                    else
                    {
                        <option value="@timeZone.Id">@timeZone.DisplayName</option>
                    }
                }
            </select>
            <button class="btn btn-secondary" @onclick="() => SelectedTimeZoneId = TimeZoneInfo.Local.Id">Текущий</button>
        </div>

    </div>
    <div class="col-auto">
        <button class="btn btn-primary mb-3" @onclick="async () => await SetCurrentTimeZone()" type="submit">Изменить</button>
    </div>
</div>
<div class="row">
    <div class="col-3">
        <label class="form-label">Пароль</label>
    </div>
    <div class="col">
        <div class="d-flex">
            <input autocomplete="new-password" @bind="PasswordFirst" class="form-control" placeholder="Введите новый пароль" type="password">
            <input autocomplete="new-password" @bind="PasswordSecond" class="form-control" placeholder="Повторите пароль" type="password">
        </div>
    </div>
    <div class="col-auto">
        <button class="btn btn-primary mb-3" disabled="@(PasswordFirst != PasswordSecond)" @onclick="async () => await SetNewPassword()" type="password">Изменить</button>
    </div>
</div>
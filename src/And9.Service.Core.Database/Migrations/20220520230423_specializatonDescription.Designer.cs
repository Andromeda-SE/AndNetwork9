// <auto-generated />
using System;
using System.Collections.Generic;
using And9.Service.Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace And9.Service.Core.Database.Migrations
{
    [DbContext(typeof(CoreDataContext))]
    [Migration("20220520230423_specializatonDescription")]
    partial class specializatonDescription
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Core")
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.CandidateRegisteredRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<short?>("AuxiliarySquad")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("HoursCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<string>("Recommendation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Accepted");

                    b.HasIndex("AuxiliarySquad");

                    b.HasIndex("MemberId");

                    b.ToTable("CandidateRequests", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal?>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("IsSquadCommander")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("JoinDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("MicrosoftId")
                        .HasColumnType("bigint");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Rank")
                        .HasColumnType("smallint");

                    b.Property<string>("RealName")
                        .HasColumnType("text");

                    b.Property<short?>("SquadNumber")
                        .HasColumnType("smallint");

                    b.Property<short>("SquadPartNumber")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("SteamId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long?>("TelegramId")
                        .HasColumnType("bigint");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<long?>("VkId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DiscordId")
                        .IsUnique();

                    b.HasIndex("MicrosoftId")
                        .IsUnique();

                    b.HasIndex("Nickname")
                        .IsUnique();

                    b.HasIndex("Rank");

                    b.HasIndex("SquadNumber");

                    b.HasIndex("SteamId")
                        .IsUnique();

                    b.HasIndex("TelegramId")
                        .IsUnique();

                    b.HasIndex("VkId")
                        .IsUnique();

                    b.HasIndex("SquadNumber", "SquadPartNumber");

                    b.ToTable("Members", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.MemberSpecialization", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ApproveDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer");

                    b.HasKey("MemberId", "SpecializationId");

                    b.HasIndex("MemberId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("MemberId", "Priority")
                        .IsUnique();

                    b.ToTable("MemberSpecializations", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Direction")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Direction");

                    b.HasIndex("Direction", "Name")
                        .IsUnique();

                    b.ToTable("Specializations", "Core");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyToken = new Guid("4b86d4a4-42a8-4372-8052-2a957c9f198a"),
                            Description = "Шахтеры занимаются разведкой и разработкой рудных жил. Для исполнения задач они используют ручные буры и специальные корабли.",
                            Direction = (short)2,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(4238),
                            Name = "Шахтер"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyToken = new Guid("0157a0ae-c94b-4729-807c-d5313753f5fb"),
                            Description = "Задача монтажников — сборка блоков и базовая настройка. Также они используют свои навыки для извлечения компонентов со старых, поврежденных или трофейных блоков. Их типичные инструменты — сварочные аппараты и УШМ, установленные на корабле или выполненые в ручном варианте.",
                            Direction = (short)2,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(4478),
                            Name = "Монтажник"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyToken = new Guid("51448212-5201-4498-87bc-5a090f4f964e"),
                            Description = "Данная специализация объединяет пилотов кораблей, не предназначенных для прямого боестолкновения.",
                            Direction = (short)2,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(4595),
                            Name = "Пилот гражданских кораблей"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyToken = new Guid("a21ed3b4-e81f-40b4-ae34-0cae9170f565"),
                            Description = "Водители — операторы назменой техники. В их задачи входит поиск оптимальных маршрутов и учет оссобенностей каждого типа техники",
                            Direction = (short)2,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(4696),
                            Name = "Водитель"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyToken = new Guid("98d91882-e4fd-41e6-80cc-9f81efa8ab1e"),
                            Description = "Управляющие следят за состоянием и коплектацией вереных станций, кораблей и иных машин.",
                            Direction = (short)2,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(4781),
                            Name = "Управляющий пунктом базирования"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyToken = new Guid("b204d5f6-df68-4b7c-bc05-669d3ca7704e"),
                            Description = "Коменданты ведут учет пунктов базирования и флота. Даная специализация предполагает глубокие познания в ведении тылового обеспечения воюющей группы.",
                            Direction = (short)2,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(4886),
                            Name = "Комендант"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyToken = new Guid("64e6772b-7750-43fe-be89-e331cff6e46e"),
                            Description = "Скриптеры осуществляют автоматизацию объектов, создавая новые или модифицируя существующие скрипты, а также ведут документацию по созданным решениям.",
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(4989),
                            Name = "Скриптер"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyToken = new Guid("a4013f32-8ea6-479d-8649-2d52399ae83c"),
                            Description = "Данная специализация предполагает участие в создании и совершенствовании инфраструктуры клана. В отличие от скриптеров, программисты обладают широкими знаниями в технологиях разработки ПО вне игры.",
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5113),
                            Name = "Программист"
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyToken = new Guid("e9da6847-838c-4a5c-b2b6-2f30e86d4e53"),
                            Description = "",
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5155),
                            Name = "Разработчик малых гр. кораблей"
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyToken = new Guid("d71cf81d-e17b-41a1-ad49-d1237c281381"),
                            Description = "",
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5202),
                            Name = "Разработчик больших гр. кораблей"
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyToken = new Guid("0de59bae-ba83-4c44-a835-503ff8768938"),
                            Description = "",
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5248),
                            Name = "Разработчик внутренних интерьеров"
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyToken = new Guid("75938ef1-f635-450f-93ff-3eede824176a"),
                            Description = "",
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5283),
                            Name = "Дизайнер кораблей"
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyToken = new Guid("d090175f-5158-4462-9047-1dd7916d7045"),
                            Description = "",
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5325),
                            Name = "Разработчик малых военных кораблей"
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyToken = new Guid("a9c2c641-32cb-4847-928f-25fd95c5d4d6"),
                            Description = "",
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5368),
                            Name = "Разработчик больших военных кораблей"
                        },
                        new
                        {
                            Id = 15,
                            ConcurrencyToken = new Guid("c7cec4de-8ff8-47ef-8673-5495417e0ad6"),
                            Description = "",
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5408),
                            Name = "Разработчик специальных систем"
                        },
                        new
                        {
                            Id = 16,
                            ConcurrencyToken = new Guid("0be102fc-eda2-4943-8d42-0bbb442b64a7"),
                            Description = "",
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5451),
                            Name = "Разработчик наземной техники"
                        },
                        new
                        {
                            Id = 17,
                            ConcurrencyToken = new Guid("93e8e735-f3bb-4037-b03e-300e01c92388"),
                            Description = "",
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5486),
                            Name = "Управляющий проектами"
                        },
                        new
                        {
                            Id = 18,
                            ConcurrencyToken = new Guid("c4e59ac6-67e4-41fa-9c35-b531f05975f1"),
                            Description = "",
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5524),
                            Name = "Интегратор скриптов"
                        },
                        new
                        {
                            Id = 19,
                            ConcurrencyToken = new Guid("f3469dc5-463d-435a-a74b-04615ad16495"),
                            Description = "",
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5559),
                            Name = "Интегратор чертежей"
                        },
                        new
                        {
                            Id = 20,
                            ConcurrencyToken = new Guid("e7cec84d-fa44-4dae-9948-4aed50f3d45a"),
                            Description = "",
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5598),
                            Name = "Пехотинец-диверсант"
                        },
                        new
                        {
                            Id = 21,
                            ConcurrencyToken = new Guid("3215ec7a-5c07-4947-8e84-c34678f9a63e"),
                            Description = "",
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5631),
                            Name = "Наводчик турелей"
                        },
                        new
                        {
                            Id = 22,
                            ConcurrencyToken = new Guid("8220e9e3-d5f0-4cf9-82e7-c0fea27cd407"),
                            Description = "",
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5670),
                            Name = "Оператор специальных систем"
                        },
                        new
                        {
                            Id = 23,
                            ConcurrencyToken = new Guid("340f2b9f-dae9-488b-82a7-29098dbbb3a9"),
                            Description = "",
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5717),
                            Name = "Пилот истребителя / перехватчика / разрушителя"
                        },
                        new
                        {
                            Id = 24,
                            ConcurrencyToken = new Guid("5d16fa2c-8a2b-45d6-8c1c-db6b316615fc"),
                            Description = "",
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5756),
                            Name = "Пилот снайпера / САУ"
                        },
                        new
                        {
                            Id = 25,
                            ConcurrencyToken = new Guid("203e763e-59d8-4926-be95-9670f1e587f5"),
                            Description = "",
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5792),
                            Name = "Пилот катера / самбуки"
                        },
                        new
                        {
                            Id = 26,
                            ConcurrencyToken = new Guid("b2f312c5-964d-4b0d-8892-a1953c75959a"),
                            Description = "",
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5831),
                            Name = "Пилот штурмовика / монитора"
                        },
                        new
                        {
                            Id = 27,
                            ConcurrencyToken = new Guid("954c3f21-9b2c-48df-ac4d-7d7b36cd2191"),
                            Description = "",
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5864),
                            Name = "Пилот канонерки"
                        },
                        new
                        {
                            Id = 28,
                            ConcurrencyToken = new Guid("7f49089b-4d76-46cd-b499-3b83fe49c9f0"),
                            Description = "",
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5903),
                            Name = "Пилот торпедоносца / эсминца"
                        },
                        new
                        {
                            Id = 29,
                            ConcurrencyToken = new Guid("45850aac-5f28-4304-a10b-3fc0097ebabc"),
                            Description = "",
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5938),
                            Name = "Пилот фрегата"
                        },
                        new
                        {
                            Id = 30,
                            ConcurrencyToken = new Guid("ea9d4525-1254-48e5-b62c-8a1c1775172f"),
                            Description = "",
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(5970),
                            Name = "Пилот корвета"
                        },
                        new
                        {
                            Id = 31,
                            ConcurrencyToken = new Guid("7551abca-f18d-404e-8701-66f421e5c246"),
                            Description = "",
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(6061),
                            Name = "Пилот броненосца / линкора"
                        },
                        new
                        {
                            Id = 32,
                            ConcurrencyToken = new Guid("fd0d2af2-e1b0-443e-a395-75949d919736"),
                            Description = "",
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(6097),
                            Name = "Командир звена"
                        },
                        new
                        {
                            Id = 33,
                            ConcurrencyToken = new Guid("f3cc8ee5-5a70-41e3-a1a3-2a15486bdf67"),
                            Description = "",
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(6135),
                            Name = "Командир флотилии"
                        },
                        new
                        {
                            Id = 34,
                            ConcurrencyToken = new Guid("9ef3f55b-a76e-4ff3-91fa-fd2a473646c8"),
                            Description = "Дипломаты занимаются контактами с другими кланами, отдельными представителями сообщества и разработчиками игры",
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(6222),
                            Name = "Дипломат"
                        },
                        new
                        {
                            Id = 35,
                            ConcurrencyToken = new Guid("3bd60647-8833-40a1-a63b-30ff71b18a1f"),
                            Description = "Основной задачей агитаторов является поиск игроков на общедоступных серверах и плоаках сообщества. Также они осущетвляют поддержку дипломатам в посике объеденений игроков.",
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(6382),
                            Name = "Агитатор"
                        },
                        new
                        {
                            Id = 36,
                            ConcurrencyToken = new Guid("5c3132db-8558-46ff-ad44-da1336cb916c"),
                            Description = "Монтаж видео — процесс создания из исходных записей цельного видео. Монтажеры кроме обработки видео создают спецэффекты.",
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(6475),
                            Name = "Монтажёр"
                        },
                        new
                        {
                            Id = 37,
                            ConcurrencyToken = new Guid("a3a5b873-820b-478e-860d-f30365dc1d12"),
                            Description = "Репортеры собирают информацию о просиходящем внутри клана и в сообществе игры, распростаняют информацию среди участников клана и иных заинтересованых лиц.",
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(6579),
                            Name = "Репортёр"
                        },
                        new
                        {
                            Id = 38,
                            ConcurrencyToken = new Guid("c008973d-a51d-452a-b847-356edde3c48f"),
                            Description = "Стримеры осуществляют прямые включения с мест событий, а также подготовку к ним",
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(6647),
                            Name = "Стример"
                        },
                        new
                        {
                            Id = 39,
                            ConcurrencyToken = new Guid("800a52b9-0b6a-48ea-be53-60b17e882ec7"),
                            Description = "Операторы видеозаписи записывают исходные видео дл дальнейшей обработки монтажером",
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(6744),
                            Name = "Оператор видеозаписи"
                        },
                        new
                        {
                            Id = 40,
                            ConcurrencyToken = new Guid("408d0ffb-a03e-416c-886e-2351571bc3ef"),
                            Description = "Мастера графики создают плакаты, заставки, обрабатывают скриншоты и подготавливают их для публикации",
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(6826),
                            Name = "Мастер графики"
                        },
                        new
                        {
                            Id = 41,
                            ConcurrencyToken = new Guid("c70c662a-0ac1-480c-a972-50337e40e79c"),
                            Description = "",
                            Direction = (short)1,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(6856),
                            Name = "Наставник"
                        },
                        new
                        {
                            Id = 42,
                            ConcurrencyToken = new Guid("08275083-b942-4513-abab-243d281758cb"),
                            Description = "",
                            Direction = (short)1,
                            LastChanged = new DateTime(2022, 5, 20, 23, 4, 23, 317, DateTimeKind.Utc).AddTicks(6887),
                            Name = "Ментор"
                        });
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Squad", b =>
                {
                    b.Property<short>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Number"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateOnly>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<List<string>>("Names")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Number");

                    b.HasIndex("IsActive");

                    b.ToTable("Squads", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadMembershipHistoryEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("JoinDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LeaveDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<short>("SquadId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("SquadId");

                    b.ToTable("SquadMembershipHistory", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsCanceledByMember")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<short>("SquadNumber")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Accepted");

                    b.HasIndex("MemberId");

                    b.HasIndex("SquadNumber");

                    b.ToTable("SquadRequests", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.CandidateRegisteredRequest", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Member", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Squad", "Squad")
                        .WithMany("Members")
                        .HasForeignKey("SquadNumber");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.MemberSpecialization", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Member", "Member")
                        .WithMany("Specializations")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("And9.Service.Core.Abstractions.Models.Specialization", "Specialization")
                        .WithMany("MemberSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadMembershipHistoryEntry", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Member", "Member")
                        .WithMany("SquadMembershipHistoryEntries")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("And9.Service.Core.Abstractions.Models.Squad", "Squad")
                        .WithMany("SquadMembershipHistoryEntries")
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadRequest", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Member", "Member")
                        .WithMany("SquadRequests")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("And9.Service.Core.Abstractions.Models.Squad", "Squad")
                        .WithMany("SquadRequests")
                        .HasForeignKey("SquadNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Member", b =>
                {
                    b.Navigation("Specializations");

                    b.Navigation("SquadMembershipHistoryEntries");

                    b.Navigation("SquadRequests");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Specialization", b =>
                {
                    b.Navigation("MemberSpecializations");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Squad", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("SquadMembershipHistoryEntries");

                    b.Navigation("SquadRequests");
                });
#pragma warning restore 612, 618
        }
    }
}

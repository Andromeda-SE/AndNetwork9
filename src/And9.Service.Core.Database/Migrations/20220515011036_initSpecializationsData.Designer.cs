// <auto-generated />
using System;
using System.Collections.Generic;
using And9.Service.Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace And9.Service.Core.Database.Migrations
{
    [DbContext(typeof(CoreDataContext))]
    [Migration("20220515011036_initSpecializationsData")]
    partial class initSpecializationsData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Core")
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.CandidateRegisteredRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<short?>("AuxiliarySquad")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("HoursCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<string>("Recommendation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Accepted");

                    b.HasIndex("AuxiliarySquad");

                    b.HasIndex("MemberId");

                    b.ToTable("CandidateRequests", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal?>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("IsSquadCommander")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("JoinDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("MicrosoftId")
                        .HasColumnType("bigint");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Rank")
                        .HasColumnType("smallint");

                    b.Property<string>("RealName")
                        .HasColumnType("text");

                    b.Property<short?>("SquadNumber")
                        .HasColumnType("smallint");

                    b.Property<short>("SquadPartNumber")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("SteamId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long?>("TelegramId")
                        .HasColumnType("bigint");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<long?>("VkId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DiscordId")
                        .IsUnique();

                    b.HasIndex("MicrosoftId")
                        .IsUnique();

                    b.HasIndex("Nickname")
                        .IsUnique();

                    b.HasIndex("Rank");

                    b.HasIndex("SquadNumber");

                    b.HasIndex("SteamId")
                        .IsUnique();

                    b.HasIndex("TelegramId")
                        .IsUnique();

                    b.HasIndex("VkId")
                        .IsUnique();

                    b.HasIndex("SquadNumber", "SquadPartNumber");

                    b.ToTable("Members", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.MemberSpecialization", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ApproveDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer");

                    b.HasKey("MemberId", "SpecializationId");

                    b.HasIndex("MemberId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("MemberId", "Priority")
                        .IsUnique();

                    b.ToTable("MemberSpecialization", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<short>("Direction")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Direction");

                    b.HasIndex("Direction", "Name")
                        .IsUnique();

                    b.ToTable("Specialization", "Core");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyToken = new Guid("dea10913-64d3-49b5-b7a9-53b4305bc893"),
                            Direction = (short)2,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(4734),
                            Name = "Шахтер"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyToken = new Guid("2bc75b3c-9124-49c0-af67-563b1e316560"),
                            Direction = (short)2,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(4834),
                            Name = "Монтажник"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyToken = new Guid("575622b8-b05a-4884-b483-1cbb956b7684"),
                            Direction = (short)2,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(4871),
                            Name = "Пилот гражданских кораблей"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyToken = new Guid("2fc5a608-1f65-4225-9523-59c0372b066c"),
                            Direction = (short)2,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(4900),
                            Name = "Управляющий станцией"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyToken = new Guid("2b960453-1108-4b76-b0b3-b11fa40ba88d"),
                            Direction = (short)2,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(4923),
                            Name = "Комендант"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyToken = new Guid("6ec49bee-f038-4527-8c6c-c323ed88f893"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(4947),
                            Name = "Скриптер"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyToken = new Guid("d5f347e2-5f66-4c70-9bb2-aaab599ad24f"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(4981),
                            Name = "Программист"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyToken = new Guid("6acdbcdc-2b6f-4cf4-b312-70d069345087"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5012),
                            Name = "Разработчик малых гр. кораблей"
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyToken = new Guid("83d40e01-f025-4f5a-a9af-e3e323a48d54"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5066),
                            Name = "Разработчик больших гр. кораблей"
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyToken = new Guid("3995444d-4a1f-4c64-a6d3-50bef25cb999"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5099),
                            Name = "Разработчик внутренних интерьеров"
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyToken = new Guid("db03629f-2148-4657-b2b9-181b68180b7e"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5124),
                            Name = "Дизайнер кораблей"
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyToken = new Guid("a81be983-590e-4573-a208-60ff2230ecb1"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5157),
                            Name = "Разработчик малых военных кораблей"
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyToken = new Guid("6b48aa61-224d-4aa3-8895-92758155d351"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5189),
                            Name = "Разработчик больших военных кораблей"
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyToken = new Guid("ac846559-7961-4668-8fed-7dec3e4a7dfe"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5219),
                            Name = "Разработчик специальных систем"
                        },
                        new
                        {
                            Id = 15,
                            ConcurrencyToken = new Guid("eec3b095-ecdd-4a5c-8939-a620380df157"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5275),
                            Name = "Разработчик наземной техники"
                        },
                        new
                        {
                            Id = 16,
                            ConcurrencyToken = new Guid("a8eaa56e-eb09-4f6c-a4fa-d4529a43fb47"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5302),
                            Name = "Управляющий проектами"
                        },
                        new
                        {
                            Id = 17,
                            ConcurrencyToken = new Guid("8b7da21c-7939-4799-8d0c-58afc05b678e"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5327),
                            Name = "Интегратор скриптов"
                        },
                        new
                        {
                            Id = 18,
                            ConcurrencyToken = new Guid("0886c86a-2832-41d2-8ca7-7d725d1b2015"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5352),
                            Name = "Интегратор чертежей"
                        },
                        new
                        {
                            Id = 19,
                            ConcurrencyToken = new Guid("b2a3c799-347c-444f-94d1-3b3c10c892f1"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5378),
                            Name = "Пехотинец-диверсант"
                        },
                        new
                        {
                            Id = 20,
                            ConcurrencyToken = new Guid("240d3288-e6cc-4a9e-9b51-eb21d6b3c4d2"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5401),
                            Name = "Наводчик турелей"
                        },
                        new
                        {
                            Id = 21,
                            ConcurrencyToken = new Guid("ecde1a48-451f-43cc-a84b-f5a519d17048"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5431),
                            Name = "Оператор специальных систем"
                        },
                        new
                        {
                            Id = 22,
                            ConcurrencyToken = new Guid("ffc9a545-cfdb-408e-b576-2b08764e59eb"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5492),
                            Name = "Пилот истребителя / перехватчика / разрушителя"
                        },
                        new
                        {
                            Id = 23,
                            ConcurrencyToken = new Guid("76f20328-7fb3-4728-a15f-28495df5318b"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5521),
                            Name = "Пилот снайпера / САУ"
                        },
                        new
                        {
                            Id = 24,
                            ConcurrencyToken = new Guid("b8ae0d22-87fa-4d78-af41-5369b46a6447"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5547),
                            Name = "Пилот катера / самбуки"
                        },
                        new
                        {
                            Id = 25,
                            ConcurrencyToken = new Guid("c40fbe2a-ea53-4f10-83d3-28cf0cd3be09"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5576),
                            Name = "Пилот штурмовика / монитора"
                        },
                        new
                        {
                            Id = 26,
                            ConcurrencyToken = new Guid("b3ab44f1-ee1e-4fdf-83d4-9a9a5a1896a9"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5599),
                            Name = "Пилот канонерки"
                        },
                        new
                        {
                            Id = 27,
                            ConcurrencyToken = new Guid("67f2e0b3-2a64-458a-9532-4789ea01a603"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5628),
                            Name = "Пилот торпедоносца / эсминца"
                        },
                        new
                        {
                            Id = 28,
                            ConcurrencyToken = new Guid("4c49dcf9-735f-46f2-a457-a81f7435d3cd"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5678),
                            Name = "Пилот фрегата"
                        },
                        new
                        {
                            Id = 29,
                            ConcurrencyToken = new Guid("9a031a9b-f6fc-4125-ac1a-0486ffb4e637"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5701),
                            Name = "Пилот корвета"
                        },
                        new
                        {
                            Id = 30,
                            ConcurrencyToken = new Guid("3d4081cf-f16f-48c0-92ba-cea010314f4b"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5729),
                            Name = "Пилот броненосца / линкора"
                        },
                        new
                        {
                            Id = 31,
                            ConcurrencyToken = new Guid("4785ba81-8f4e-43de-8bee-1e73c7a0b1d0"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5754),
                            Name = "Командир звена"
                        },
                        new
                        {
                            Id = 32,
                            ConcurrencyToken = new Guid("c8bad0d4-4b08-4bb1-afa1-4ddc1a5edcaa"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5778),
                            Name = "Командир флотилии"
                        },
                        new
                        {
                            Id = 33,
                            ConcurrencyToken = new Guid("da4ccbdb-1652-4363-94e8-13700fd2d01e"),
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5799),
                            Name = "Дипломат"
                        },
                        new
                        {
                            Id = 34,
                            ConcurrencyToken = new Guid("ff3a24c2-f1da-4de4-af89-2707a8c60950"),
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5820),
                            Name = "Агитатор"
                        },
                        new
                        {
                            Id = 35,
                            ConcurrencyToken = new Guid("ef2dba27-8f6c-40b6-99aa-d39f2f4dc03d"),
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5863),
                            Name = "Монтажёр"
                        },
                        new
                        {
                            Id = 36,
                            ConcurrencyToken = new Guid("bdffd16a-b5ee-41ee-8834-e44b88b8d5fe"),
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5883),
                            Name = "Репортёр"
                        },
                        new
                        {
                            Id = 37,
                            ConcurrencyToken = new Guid("87b1fa2c-9e3e-4d81-bbe0-671a3c0bf275"),
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5902),
                            Name = "Стример"
                        },
                        new
                        {
                            Id = 38,
                            ConcurrencyToken = new Guid("c67735d4-6027-4174-a6bc-385fc42e3930"),
                            Direction = (short)1,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5922),
                            Name = "Наставник"
                        },
                        new
                        {
                            Id = 39,
                            ConcurrencyToken = new Guid("dab794ed-c948-4dbd-bc77-5d9d4d7889c6"),
                            Direction = (short)1,
                            LastChanged = new DateTime(2022, 5, 15, 1, 10, 36, 199, DateTimeKind.Utc).AddTicks(5944),
                            Name = "Ментор"
                        });
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Squad", b =>
                {
                    b.Property<short>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Number"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateOnly>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<List<string>>("Names")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Number");

                    b.HasIndex("IsActive");

                    b.ToTable("Squad", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadMembershipHistoryEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("JoinDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LeaveDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<short>("SquadId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("SquadId");

                    b.ToTable("SquadMembershipHistoryEntry", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadPart", b =>
                {
                    b.Property<short>("SquadNumber")
                        .HasColumnType("smallint");

                    b.Property<short>("SquadPartNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("SquadNumber", "SquadPartNumber");

                    b.ToTable("SquadPart", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsCanceledByMember")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<short>("SquadNumber")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Accepted");

                    b.HasIndex("MemberId");

                    b.HasIndex("SquadNumber");

                    b.ToTable("SquadRequest", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.CandidateRegisteredRequest", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Member", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Squad", "Squad")
                        .WithMany("Members")
                        .HasForeignKey("SquadNumber");

                    b.HasOne("And9.Service.Core.Abstractions.Models.SquadPart", "SquadPart")
                        .WithMany("Members")
                        .HasForeignKey("SquadNumber", "SquadPartNumber");

                    b.Navigation("Squad");

                    b.Navigation("SquadPart");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.MemberSpecialization", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Member", "Member")
                        .WithMany("Specializations")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("And9.Service.Core.Abstractions.Models.Specialization", "Specialization")
                        .WithMany("MemberSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadMembershipHistoryEntry", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Member", "Member")
                        .WithMany("SquadMembershipHistoryEntries")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("And9.Service.Core.Abstractions.Models.Squad", "Squad")
                        .WithMany("SquadMembershipHistoryEntries")
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadRequest", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Member", "Member")
                        .WithMany("SquadRequests")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("And9.Service.Core.Abstractions.Models.Squad", "Squad")
                        .WithMany("SquadRequests")
                        .HasForeignKey("SquadNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Member", b =>
                {
                    b.Navigation("Specializations");

                    b.Navigation("SquadMembershipHistoryEntries");

                    b.Navigation("SquadRequests");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Specialization", b =>
                {
                    b.Navigation("MemberSpecializations");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Squad", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("SquadMembershipHistoryEntries");

                    b.Navigation("SquadRequests");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadPart", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}

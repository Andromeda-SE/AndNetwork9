// <auto-generated />
using System;
using System.Collections.Generic;
using And9.Service.Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace And9.Service.Core.Database.Migrations
{
    [DbContext(typeof(CoreDataContext))]
    [Migration("20220520195648_specializatonDataMustApproved")]
    partial class specializatonDataMustApproved
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Core")
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.CandidateRegisteredRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<short?>("AuxiliarySquad")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("HoursCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<string>("Recommendation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Accepted");

                    b.HasIndex("AuxiliarySquad");

                    b.HasIndex("MemberId");

                    b.ToTable("CandidateRequests", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal?>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("IsSquadCommander")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("JoinDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("MicrosoftId")
                        .HasColumnType("bigint");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Rank")
                        .HasColumnType("smallint");

                    b.Property<string>("RealName")
                        .HasColumnType("text");

                    b.Property<short?>("SquadNumber")
                        .HasColumnType("smallint");

                    b.Property<short>("SquadPartNumber")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("SteamId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long?>("TelegramId")
                        .HasColumnType("bigint");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<long?>("VkId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DiscordId")
                        .IsUnique();

                    b.HasIndex("MicrosoftId")
                        .IsUnique();

                    b.HasIndex("Nickname")
                        .IsUnique();

                    b.HasIndex("Rank");

                    b.HasIndex("SquadNumber");

                    b.HasIndex("SteamId")
                        .IsUnique();

                    b.HasIndex("TelegramId")
                        .IsUnique();

                    b.HasIndex("VkId")
                        .IsUnique();

                    b.HasIndex("SquadNumber", "SquadPartNumber");

                    b.ToTable("Members", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.MemberSpecialization", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ApproveDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer");

                    b.HasKey("MemberId", "SpecializationId");

                    b.HasIndex("MemberId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("MemberId", "Priority")
                        .IsUnique();

                    b.ToTable("MemberSpecializations", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<short>("Direction")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("MustApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Direction");

                    b.HasIndex("Direction", "Name")
                        .IsUnique();

                    b.ToTable("Specializations", "Core");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyToken = new Guid("65db8906-aff4-44bd-b398-2b18117b867a"),
                            Direction = (short)2,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(1062),
                            MustApproved = false,
                            Name = "Шахтер"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyToken = new Guid("b0dca3c0-be77-48cb-9de4-2df954baa817"),
                            Direction = (short)2,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(1137),
                            MustApproved = false,
                            Name = "Монтажник"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyToken = new Guid("fe429647-9361-4cad-808d-a94099f8c100"),
                            Direction = (short)2,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(1180),
                            MustApproved = false,
                            Name = "Пилот гражданских кораблей"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyToken = new Guid("c86e8167-339f-4293-8ed2-dd876fdfabf3"),
                            Direction = (short)2,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(1218),
                            MustApproved = false,
                            Name = "Управляющий станцией"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyToken = new Guid("3f3c37ae-12c7-46d9-840d-466198d6f31f"),
                            Direction = (short)2,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(1256),
                            MustApproved = true,
                            Name = "Комендант"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyToken = new Guid("5a1f7b94-701e-4d6b-9c0e-885f69231c73"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(1300),
                            MustApproved = false,
                            Name = "Скриптер"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyToken = new Guid("d8bad8da-eccb-4d22-89ce-65c5609a5b7b"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(1332),
                            MustApproved = true,
                            Name = "Программист"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyToken = new Guid("92775f7f-454d-4b95-a269-88a2b48c77cf"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(1372),
                            MustApproved = false,
                            Name = "Разработчик малых гр. кораблей"
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyToken = new Guid("79cfa3c2-1675-4e20-a5d5-f5431c95dd4e"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(1417),
                            MustApproved = false,
                            Name = "Разработчик больших гр. кораблей"
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyToken = new Guid("d550cdfc-f266-4ed8-ac9d-09d397f19c4e"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(1461),
                            MustApproved = false,
                            Name = "Разработчик внутренних интерьеров"
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyToken = new Guid("9667b3ec-f2e5-4341-bac2-bec7622f8536"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(1497),
                            MustApproved = true,
                            Name = "Дизайнер кораблей"
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyToken = new Guid("9f011ee6-035f-48fe-9c43-b0218105ef60"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(1538),
                            MustApproved = true,
                            Name = "Разработчик малых военных кораблей"
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyToken = new Guid("f0de66fa-5b48-4a60-bd39-0bacbeb57a52"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(1660),
                            MustApproved = true,
                            Name = "Разработчик больших военных кораблей"
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyToken = new Guid("50c98a7e-29e1-41c9-a9b9-691c3214cf6a"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(1729),
                            MustApproved = true,
                            Name = "Разработчик специальных систем"
                        },
                        new
                        {
                            Id = 15,
                            ConcurrencyToken = new Guid("7a67917b-c7c0-48f5-a538-7667a90f2d8b"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(1771),
                            MustApproved = false,
                            Name = "Разработчик наземной техники"
                        },
                        new
                        {
                            Id = 16,
                            ConcurrencyToken = new Guid("3de946e8-1c98-435c-b059-18864d34a1c9"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(1807),
                            MustApproved = true,
                            Name = "Управляющий проектами"
                        },
                        new
                        {
                            Id = 17,
                            ConcurrencyToken = new Guid("150a7e4b-71af-41a9-a868-19a009e3e343"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(1843),
                            MustApproved = false,
                            Name = "Интегратор скриптов"
                        },
                        new
                        {
                            Id = 18,
                            ConcurrencyToken = new Guid("ce7d643e-dbde-4db1-a5c2-07dbeeed3f14"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(1884),
                            MustApproved = false,
                            Name = "Интегратор чертежей"
                        },
                        new
                        {
                            Id = 19,
                            ConcurrencyToken = new Guid("c9444435-8043-44f9-8dc6-50cba245bc71"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(1920),
                            MustApproved = true,
                            Name = "Пехотинец-диверсант"
                        },
                        new
                        {
                            Id = 20,
                            ConcurrencyToken = new Guid("e166d54a-7250-4f90-ae03-526d364d7309"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(1954),
                            MustApproved = false,
                            Name = "Наводчик турелей"
                        },
                        new
                        {
                            Id = 21,
                            ConcurrencyToken = new Guid("60c4beb7-d15e-4284-87d3-fb40a940793f"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(1992),
                            MustApproved = true,
                            Name = "Оператор специальных систем"
                        },
                        new
                        {
                            Id = 22,
                            ConcurrencyToken = new Guid("7c4ae393-3e8b-4c55-9927-47105ac07b44"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(2050),
                            MustApproved = false,
                            Name = "Пилот истребителя / перехватчика / разрушителя"
                        },
                        new
                        {
                            Id = 23,
                            ConcurrencyToken = new Guid("c0df6216-ff99-46db-ac42-ac3b757ce181"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(2087),
                            MustApproved = true,
                            Name = "Пилот снайпера / САУ"
                        },
                        new
                        {
                            Id = 24,
                            ConcurrencyToken = new Guid("42528b43-4bce-4be6-8b0c-dea85ea846e5"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(2123),
                            MustApproved = true,
                            Name = "Пилот катера / самбуки"
                        },
                        new
                        {
                            Id = 25,
                            ConcurrencyToken = new Guid("7c9451c8-dc67-4142-8243-06a66ff53b99"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(2162),
                            MustApproved = true,
                            Name = "Пилот штурмовика / монитора"
                        },
                        new
                        {
                            Id = 26,
                            ConcurrencyToken = new Guid("350a2baf-2a88-429f-9fce-c4f9728c68d9"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(2200),
                            MustApproved = true,
                            Name = "Пилот канонерки"
                        },
                        new
                        {
                            Id = 27,
                            ConcurrencyToken = new Guid("cd072bbf-6532-4d2f-97d3-8f4e1532292a"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(2240),
                            MustApproved = true,
                            Name = "Пилот торпедоносца / эсминца"
                        },
                        new
                        {
                            Id = 28,
                            ConcurrencyToken = new Guid("78cb6d1f-393c-494b-b4bf-c85d5d940d6d"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(2272),
                            MustApproved = true,
                            Name = "Пилот фрегата"
                        },
                        new
                        {
                            Id = 29,
                            ConcurrencyToken = new Guid("f4984dfa-a063-4f0a-ae64-6791cdf6c6bb"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(2305),
                            MustApproved = false,
                            Name = "Пилот корвета"
                        },
                        new
                        {
                            Id = 30,
                            ConcurrencyToken = new Guid("a1c5d002-607c-44a6-8b5c-ed7e0013eeb3"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(2347),
                            MustApproved = true,
                            Name = "Пилот броненосца / линкора"
                        },
                        new
                        {
                            Id = 31,
                            ConcurrencyToken = new Guid("8d757e42-146d-4b65-a531-598cf8bcbd4c"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(2384),
                            MustApproved = true,
                            Name = "Командир звена"
                        },
                        new
                        {
                            Id = 32,
                            ConcurrencyToken = new Guid("249dd02b-fb83-400d-8edf-67106c2e4b6e"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(2419),
                            MustApproved = true,
                            Name = "Командир флотилии"
                        },
                        new
                        {
                            Id = 33,
                            ConcurrencyToken = new Guid("a37600d1-1a3c-4a0f-8c28-b37657941e8a"),
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(2450),
                            MustApproved = true,
                            Name = "Дипломат"
                        },
                        new
                        {
                            Id = 34,
                            ConcurrencyToken = new Guid("684d86b0-10a2-4741-8685-0ed3af160f98"),
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(2482),
                            MustApproved = true,
                            Name = "Агитатор"
                        },
                        new
                        {
                            Id = 35,
                            ConcurrencyToken = new Guid("4f011990-b3d7-434f-9bb6-0791a844fd52"),
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(2519),
                            MustApproved = true,
                            Name = "Монтажёр"
                        },
                        new
                        {
                            Id = 36,
                            ConcurrencyToken = new Guid("829085be-f004-4620-bd02-6eac873675c8"),
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(2551),
                            MustApproved = false,
                            Name = "Репортёр"
                        },
                        new
                        {
                            Id = 37,
                            ConcurrencyToken = new Guid("36e9ee9e-0b5d-4806-aa16-03755dbd09c6"),
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(2581),
                            MustApproved = false,
                            Name = "Стример"
                        },
                        new
                        {
                            Id = 38,
                            ConcurrencyToken = new Guid("5d02caf0-63ac-480d-a542-c3aa64df7442"),
                            Direction = (short)1,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(2614),
                            MustApproved = true,
                            Name = "Наставник"
                        },
                        new
                        {
                            Id = 39,
                            ConcurrencyToken = new Guid("5a2fc03e-e6b7-449d-a59b-effcb58c9856"),
                            Direction = (short)1,
                            LastChanged = new DateTime(2022, 5, 20, 19, 56, 47, 811, DateTimeKind.Utc).AddTicks(2643),
                            MustApproved = false,
                            Name = "Ментор"
                        });
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Squad", b =>
                {
                    b.Property<short>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Number"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateOnly>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<List<string>>("Names")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Number");

                    b.HasIndex("IsActive");

                    b.ToTable("Squads", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadMembershipHistoryEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("JoinDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LeaveDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<short>("SquadId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("SquadId");

                    b.ToTable("SquadMembershipHistory", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsCanceledByMember")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<short>("SquadNumber")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Accepted");

                    b.HasIndex("MemberId");

                    b.HasIndex("SquadNumber");

                    b.ToTable("SquadRequests", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.CandidateRegisteredRequest", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Member", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Squad", "Squad")
                        .WithMany("Members")
                        .HasForeignKey("SquadNumber");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.MemberSpecialization", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Member", "Member")
                        .WithMany("Specializations")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("And9.Service.Core.Abstractions.Models.Specialization", "Specialization")
                        .WithMany("MemberSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadMembershipHistoryEntry", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Member", "Member")
                        .WithMany("SquadMembershipHistoryEntries")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("And9.Service.Core.Abstractions.Models.Squad", "Squad")
                        .WithMany("SquadMembershipHistoryEntries")
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadRequest", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Member", "Member")
                        .WithMany("SquadRequests")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("And9.Service.Core.Abstractions.Models.Squad", "Squad")
                        .WithMany("SquadRequests")
                        .HasForeignKey("SquadNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Member", b =>
                {
                    b.Navigation("Specializations");

                    b.Navigation("SquadMembershipHistoryEntries");

                    b.Navigation("SquadRequests");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Specialization", b =>
                {
                    b.Navigation("MemberSpecializations");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Squad", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("SquadMembershipHistoryEntries");

                    b.Navigation("SquadRequests");
                });
#pragma warning restore 612, 618
        }
    }
}

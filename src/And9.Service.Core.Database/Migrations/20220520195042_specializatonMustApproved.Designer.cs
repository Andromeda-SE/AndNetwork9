// <auto-generated />
using System;
using System.Collections.Generic;
using And9.Service.Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace And9.Service.Core.Database.Migrations
{
    [DbContext(typeof(CoreDataContext))]
    [Migration("20220520195042_specializatonMustApproved")]
    partial class specializatonMustApproved
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Core")
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.CandidateRegisteredRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<short?>("AuxiliarySquad")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("HoursCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<string>("Recommendation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Accepted");

                    b.HasIndex("AuxiliarySquad");

                    b.HasIndex("MemberId");

                    b.ToTable("CandidateRequests", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal?>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("IsSquadCommander")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("JoinDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("MicrosoftId")
                        .HasColumnType("bigint");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Rank")
                        .HasColumnType("smallint");

                    b.Property<string>("RealName")
                        .HasColumnType("text");

                    b.Property<short?>("SquadNumber")
                        .HasColumnType("smallint");

                    b.Property<short>("SquadPartNumber")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("SteamId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long?>("TelegramId")
                        .HasColumnType("bigint");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<long?>("VkId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DiscordId")
                        .IsUnique();

                    b.HasIndex("MicrosoftId")
                        .IsUnique();

                    b.HasIndex("Nickname")
                        .IsUnique();

                    b.HasIndex("Rank");

                    b.HasIndex("SquadNumber");

                    b.HasIndex("SteamId")
                        .IsUnique();

                    b.HasIndex("TelegramId")
                        .IsUnique();

                    b.HasIndex("VkId")
                        .IsUnique();

                    b.HasIndex("SquadNumber", "SquadPartNumber");

                    b.ToTable("Members", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.MemberSpecialization", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ApproveDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer");

                    b.HasKey("MemberId", "SpecializationId");

                    b.HasIndex("MemberId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("MemberId", "Priority")
                        .IsUnique();

                    b.ToTable("MemberSpecializations", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<short>("Direction")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("MustApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Direction");

                    b.HasIndex("Direction", "Name")
                        .IsUnique();

                    b.ToTable("Specializations", "Core");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyToken = new Guid("409896dd-bcb5-41d7-8e54-afcf6e634004"),
                            Direction = (short)2,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(8468),
                            MustApproved = false,
                            Name = "Шахтер"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyToken = new Guid("1f7bcd42-822a-4ec9-ad55-4e5dc908195b"),
                            Direction = (short)2,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(8576),
                            MustApproved = false,
                            Name = "Монтажник"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyToken = new Guid("c43adce1-19f8-4eb0-95b8-2b699571f215"),
                            Direction = (short)2,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(8615),
                            MustApproved = false,
                            Name = "Пилот гражданских кораблей"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyToken = new Guid("719fd852-e9e3-49b5-8db8-a3e886088e51"),
                            Direction = (short)2,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(8654),
                            MustApproved = false,
                            Name = "Управляющий станцией"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyToken = new Guid("78c1f3c8-34c3-4e6c-8f34-e162f1e59ad5"),
                            Direction = (short)2,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(8683),
                            MustApproved = false,
                            Name = "Комендант"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyToken = new Guid("654feebf-90d6-4beb-bd08-783e50e051d4"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(8711),
                            MustApproved = false,
                            Name = "Скриптер"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyToken = new Guid("bc429f2e-1f4b-4dcd-9d8c-e3e28903324f"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(8737),
                            MustApproved = false,
                            Name = "Программист"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyToken = new Guid("0883c1fa-a7c0-426e-804c-9ff1305eea9a"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(8772),
                            MustApproved = false,
                            Name = "Разработчик малых гр. кораблей"
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyToken = new Guid("6e9e486b-5f6c-4abe-b695-270f8076db5f"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(8816),
                            MustApproved = false,
                            Name = "Разработчик больших гр. кораблей"
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyToken = new Guid("18d0adb9-e5d9-46e1-9c6d-c5b76b68e243"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(8859),
                            MustApproved = false,
                            Name = "Разработчик внутренних интерьеров"
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyToken = new Guid("4f49adc6-3285-4aec-8455-20021b54e134"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(8889),
                            MustApproved = false,
                            Name = "Дизайнер кораблей"
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyToken = new Guid("2b2a504a-b6bf-4540-ab8d-715eaf3d8f89"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(8927),
                            MustApproved = false,
                            Name = "Разработчик малых военных кораблей"
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyToken = new Guid("ab4327f6-00b2-4961-b7cd-720716bf5aea"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(8965),
                            MustApproved = false,
                            Name = "Разработчик больших военных кораблей"
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyToken = new Guid("c471551c-d720-484c-aa2f-6620ba15b138"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9005),
                            MustApproved = false,
                            Name = "Разработчик специальных систем"
                        },
                        new
                        {
                            Id = 15,
                            ConcurrencyToken = new Guid("b692bd6e-b822-489d-a67d-347d4c4734cd"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9040),
                            MustApproved = false,
                            Name = "Разработчик наземной техники"
                        },
                        new
                        {
                            Id = 16,
                            ConcurrencyToken = new Guid("096b2075-2a3b-43de-b40b-fa09aca51c9a"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9071),
                            MustApproved = false,
                            Name = "Управляющий проектами"
                        },
                        new
                        {
                            Id = 17,
                            ConcurrencyToken = new Guid("b325f032-32ec-4488-8ca4-d1949fed053e"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9102),
                            MustApproved = false,
                            Name = "Интегратор скриптов"
                        },
                        new
                        {
                            Id = 18,
                            ConcurrencyToken = new Guid("463bc69c-edc4-4d14-9b2b-ce4af08a9eeb"),
                            Direction = (short)3,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9136),
                            MustApproved = false,
                            Name = "Интегратор чертежей"
                        },
                        new
                        {
                            Id = 19,
                            ConcurrencyToken = new Guid("a7b58bb2-623d-4a88-9f98-7d16f4f725f3"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9171),
                            MustApproved = false,
                            Name = "Пехотинец-диверсант"
                        },
                        new
                        {
                            Id = 20,
                            ConcurrencyToken = new Guid("9e5fac28-a844-4590-ba54-8e62aa68229c"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9201),
                            MustApproved = false,
                            Name = "Наводчик турелей"
                        },
                        new
                        {
                            Id = 21,
                            ConcurrencyToken = new Guid("cc019687-182c-4ebb-a5a0-00f5e6bdd79f"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9235),
                            MustApproved = false,
                            Name = "Оператор специальных систем"
                        },
                        new
                        {
                            Id = 22,
                            ConcurrencyToken = new Guid("4886f539-9513-4115-9f19-38663ab14efa"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9278),
                            MustApproved = false,
                            Name = "Пилот истребителя / перехватчика / разрушителя"
                        },
                        new
                        {
                            Id = 23,
                            ConcurrencyToken = new Guid("8629e6d8-210a-4302-a4ee-95582963ad3a"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9309),
                            MustApproved = false,
                            Name = "Пилот снайпера / САУ"
                        },
                        new
                        {
                            Id = 24,
                            ConcurrencyToken = new Guid("97e62735-09e7-4439-81ec-35a37c6b58da"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9341),
                            MustApproved = false,
                            Name = "Пилот катера / самбуки"
                        },
                        new
                        {
                            Id = 25,
                            ConcurrencyToken = new Guid("c5e206b0-39c9-43ee-9906-c0e45258a4d0"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9380),
                            MustApproved = false,
                            Name = "Пилот штурмовика / монитора"
                        },
                        new
                        {
                            Id = 26,
                            ConcurrencyToken = new Guid("3372f33d-b0a3-4f6f-9a94-cd7a0388d5d6"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9412),
                            MustApproved = false,
                            Name = "Пилот канонерки"
                        },
                        new
                        {
                            Id = 27,
                            ConcurrencyToken = new Guid("a695d2e5-aff2-4e7d-baf9-dbefce297797"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9446),
                            MustApproved = false,
                            Name = "Пилот торпедоносца / эсминца"
                        },
                        new
                        {
                            Id = 28,
                            ConcurrencyToken = new Guid("5c007876-4560-40d6-9569-51f1867d7ce9"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9474),
                            MustApproved = false,
                            Name = "Пилот фрегата"
                        },
                        new
                        {
                            Id = 29,
                            ConcurrencyToken = new Guid("b2a4db2c-4b02-4242-ad8d-2a565b1a4210"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9502),
                            MustApproved = false,
                            Name = "Пилот корвета"
                        },
                        new
                        {
                            Id = 30,
                            ConcurrencyToken = new Guid("05a56e08-86a2-442a-a696-51c7069b40a0"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9540),
                            MustApproved = false,
                            Name = "Пилот броненосца / линкора"
                        },
                        new
                        {
                            Id = 31,
                            ConcurrencyToken = new Guid("7bfee45a-dd22-4eee-b0e9-b0234665c34f"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9569),
                            MustApproved = false,
                            Name = "Командир звена"
                        },
                        new
                        {
                            Id = 32,
                            ConcurrencyToken = new Guid("7ca60d2a-45da-4392-b1ce-b922534c6caf"),
                            Direction = (short)4,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9598),
                            MustApproved = false,
                            Name = "Командир флотилии"
                        },
                        new
                        {
                            Id = 33,
                            ConcurrencyToken = new Guid("c16c96af-a05e-4995-887e-59d707d40b28"),
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9624),
                            MustApproved = false,
                            Name = "Дипломат"
                        },
                        new
                        {
                            Id = 34,
                            ConcurrencyToken = new Guid("73657d94-e9ba-47a6-944c-ed0a05f375f6"),
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9654),
                            MustApproved = false,
                            Name = "Агитатор"
                        },
                        new
                        {
                            Id = 35,
                            ConcurrencyToken = new Guid("5be9f8a1-fa3c-4d2c-93e0-7bedfe71cf35"),
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9684),
                            MustApproved = false,
                            Name = "Монтажёр"
                        },
                        new
                        {
                            Id = 36,
                            ConcurrencyToken = new Guid("b3770fe4-9fee-4d62-b9cd-57375ddeb7e8"),
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9709),
                            MustApproved = false,
                            Name = "Репортёр"
                        },
                        new
                        {
                            Id = 37,
                            ConcurrencyToken = new Guid("cdd206f6-d831-4bd4-b078-f73b032a2621"),
                            Direction = (short)5,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9734),
                            MustApproved = false,
                            Name = "Стример"
                        },
                        new
                        {
                            Id = 38,
                            ConcurrencyToken = new Guid("7b417a51-b495-4d86-8754-843692c5bf19"),
                            Direction = (short)1,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9760),
                            MustApproved = false,
                            Name = "Наставник"
                        },
                        new
                        {
                            Id = 39,
                            ConcurrencyToken = new Guid("9f7ad8dd-f22f-483d-8dde-86b5c1b7bb7f"),
                            Direction = (short)1,
                            LastChanged = new DateTime(2022, 5, 20, 19, 50, 41, 794, DateTimeKind.Utc).AddTicks(9784),
                            MustApproved = false,
                            Name = "Ментор"
                        });
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Squad", b =>
                {
                    b.Property<short>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Number"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateOnly>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<List<string>>("Names")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Number");

                    b.HasIndex("IsActive");

                    b.ToTable("Squads", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadMembershipHistoryEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("JoinDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LeaveDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<short>("SquadId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("SquadId");

                    b.ToTable("SquadMembershipHistory", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsCanceledByMember")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<short>("SquadNumber")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Accepted");

                    b.HasIndex("MemberId");

                    b.HasIndex("SquadNumber");

                    b.ToTable("SquadRequests", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.CandidateRegisteredRequest", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Member", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Squad", "Squad")
                        .WithMany("Members")
                        .HasForeignKey("SquadNumber");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.MemberSpecialization", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Member", "Member")
                        .WithMany("Specializations")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("And9.Service.Core.Abstractions.Models.Specialization", "Specialization")
                        .WithMany("MemberSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadMembershipHistoryEntry", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Member", "Member")
                        .WithMany("SquadMembershipHistoryEntries")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("And9.Service.Core.Abstractions.Models.Squad", "Squad")
                        .WithMany("SquadMembershipHistoryEntries")
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadRequest", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Member", "Member")
                        .WithMany("SquadRequests")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("And9.Service.Core.Abstractions.Models.Squad", "Squad")
                        .WithMany("SquadRequests")
                        .HasForeignKey("SquadNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Member", b =>
                {
                    b.Navigation("Specializations");

                    b.Navigation("SquadMembershipHistoryEntries");

                    b.Navigation("SquadRequests");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Specialization", b =>
                {
                    b.Navigation("MemberSpecializations");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Squad", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("SquadMembershipHistoryEntries");

                    b.Navigation("SquadRequests");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using System.Collections.Generic;
using And9.Service.Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace And9.Service.Core.Database.Migrations
{
    [DbContext(typeof(CoreDataContext))]
    [Migration("20220515003629_squads")]
    partial class squads
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Core")
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.CandidateRegisteredRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<short?>("AuxiliarySquad")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("HoursCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<string>("Recommendation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Accepted");

                    b.HasIndex("AuxiliarySquad");

                    b.HasIndex("MemberId");

                    b.ToTable("CandidateRequests", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal?>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("IsSquadCommander")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("JoinDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("MicrosoftId")
                        .HasColumnType("bigint");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Rank")
                        .HasColumnType("smallint");

                    b.Property<string>("RealName")
                        .HasColumnType("text");

                    b.Property<short?>("SquadNumber")
                        .HasColumnType("smallint");

                    b.Property<short>("SquadPartNumber")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("SteamId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long?>("TelegramId")
                        .HasColumnType("bigint");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<long?>("VkId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DiscordId")
                        .IsUnique();

                    b.HasIndex("MicrosoftId")
                        .IsUnique();

                    b.HasIndex("Nickname")
                        .IsUnique();

                    b.HasIndex("Rank");

                    b.HasIndex("SquadNumber");

                    b.HasIndex("SteamId")
                        .IsUnique();

                    b.HasIndex("TelegramId")
                        .IsUnique();

                    b.HasIndex("VkId")
                        .IsUnique();

                    b.HasIndex("SquadNumber", "SquadPartNumber");

                    b.ToTable("Members", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.MemberSpecialization", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ApproveDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer");

                    b.HasKey("MemberId", "SpecializationId");

                    b.HasIndex("MemberId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("MemberId", "Priority")
                        .IsUnique();

                    b.ToTable("MemberSpecialization", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<short>("Direction")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Direction");

                    b.HasIndex("Direction", "Name")
                        .IsUnique();

                    b.ToTable("Specialization", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Squad", b =>
                {
                    b.Property<short>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Number"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateOnly>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<List<string>>("Names")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Number");

                    b.HasIndex("IsActive");

                    b.ToTable("Squad", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadMembershipHistoryEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("JoinDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LeaveDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<short>("SquadId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("SquadId");

                    b.ToTable("SquadMembershipHistoryEntry", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadPart", b =>
                {
                    b.Property<short>("SquadNumber")
                        .HasColumnType("smallint");

                    b.Property<short>("SquadPartNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("SquadNumber", "SquadPartNumber");

                    b.ToTable("SquadPart", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsCanceledByMember")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<short>("SquadNumber")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Accepted");

                    b.HasIndex("MemberId");

                    b.HasIndex("SquadNumber");

                    b.ToTable("SquadRequest", "Core");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.CandidateRegisteredRequest", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Member", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Squad", "Squad")
                        .WithMany("Members")
                        .HasForeignKey("SquadNumber");

                    b.HasOne("And9.Service.Core.Abstractions.Models.SquadPart", "SquadPart")
                        .WithMany("Members")
                        .HasForeignKey("SquadNumber", "SquadPartNumber");

                    b.Navigation("Squad");

                    b.Navigation("SquadPart");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.MemberSpecialization", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Member", "Member")
                        .WithMany("Specializations")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("And9.Service.Core.Abstractions.Models.Specialization", "Specialization")
                        .WithMany("MemberSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadMembershipHistoryEntry", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Member", "Member")
                        .WithMany("SquadMembershipHistoryEntries")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("And9.Service.Core.Abstractions.Models.Squad", "Squad")
                        .WithMany("SquadMembershipHistoryEntries")
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadRequest", b =>
                {
                    b.HasOne("And9.Service.Core.Abstractions.Models.Member", "Member")
                        .WithMany("SquadRequests")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("And9.Service.Core.Abstractions.Models.Squad", "Squad")
                        .WithMany("SquadRequests")
                        .HasForeignKey("SquadNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Member", b =>
                {
                    b.Navigation("Specializations");

                    b.Navigation("SquadMembershipHistoryEntries");

                    b.Navigation("SquadRequests");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Specialization", b =>
                {
                    b.Navigation("MemberSpecializations");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.Squad", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("SquadMembershipHistoryEntries");

                    b.Navigation("SquadRequests");
                });

            modelBuilder.Entity("And9.Service.Core.Abstractions.Models.SquadPart", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}

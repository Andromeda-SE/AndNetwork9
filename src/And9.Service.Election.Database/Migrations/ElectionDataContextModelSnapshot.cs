// <auto-generated />
using System;
using And9.Service.Election.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace And9.Service.Election.Database.Migrations
{
    [DbContext(typeof(ElectionDataContext))]
    partial class ElectionDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Election")
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("And9.Service.Election.Abstractions.Models.Election", b =>
                {
                    b.Property<short>("ElectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("ElectionId"));

                    b.Property<DateOnly>("AdvisorsStartDate")
                        .HasColumnType("date");

                    b.Property<int>("AgainstAllVotes")
                        .HasColumnType("integer");

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<short>("Direction")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ElectionId");

                    b.HasAlternateKey("ElectionId", "Direction");

                    b.HasIndex("Direction");

                    b.ToTable("Elections", "Election");
                });

            modelBuilder.Entity("And9.Service.Election.Abstractions.Models.ElectionVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<short>("Direction")
                        .HasColumnType("smallint");

                    b.Property<short>("ElectionId")
                        .HasColumnType("smallint");

                    b.Property<short?>("ElectionId1")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("LastChanged")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<bool?>("Voted")
                        .HasColumnType("boolean");

                    b.Property<int>("Votes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("ElectionId", "Direction", "MemberId");

                    b.HasIndex("Direction");

                    b.HasIndex("ElectionId");

                    b.HasIndex("ElectionId1");

                    b.HasIndex("ElectionId", "Direction");

                    b.ToTable("ElectionVotes", "Election");
                });

            modelBuilder.Entity("And9.Service.Election.Abstractions.Models.ElectionVote", b =>
                {
                    b.HasOne("And9.Service.Election.Abstractions.Models.Election", null)
                        .WithMany("Votes")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("And9.Service.Election.Abstractions.Models.Election", "Election")
                        .WithMany()
                        .HasForeignKey("ElectionId1");

                    b.Navigation("Election");
                });

            modelBuilder.Entity("And9.Service.Election.Abstractions.Models.Election", b =>
                {
                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
